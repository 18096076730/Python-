# 问题描述
# 摩斯电码定义了一套标准的编码，把每个字母映射到一系列点和和短划线。例如：a -> . -, b -> - ..., 
# c ->-.-。给出26个字母的完整编码表格：
# [". -","-...","-. -.","-..",".",".. -.","- -. ","....","..",". - - -","-. -",". -..","- -",
# "-.","- - -",". --.","--. -",". -.","...","-","..-","...-",". --","-..-","-.--","--.."]。
# 给定一个单词列表，单词中每个字母可以写成摩斯电码。例如，将cab写成-. -. -..-，即为一个词的转换。
# 返回所有单词中不同变换的数量


# 示例
# 输入： words = ["gin","zen","gig","msg"]
# 输出：2
# 解释：每一个单词的变换：
# "gin" -> "--...-."   "zen" -> "--...-."  "gig" -> "--...--."  "msg" -> "--...--."
# 也有两种不同的变换结果："--...-." 和 "--...--."


# 源码实现
class Solution:
    def uniqueMorseRepresentations(self, words):
        morse = [". -","- ...","- . - .","- ..",".",".. - .","-- .","....","..",". ---","- . -",". - ..", "--", "- .", "---", ". -- .","-- . -",". - .","...","-",".. -","... -",". --","- .. -","- . --","-- .."]
        s = set()
        for word in words:
            tmp = ''
            for w in word:
                tmp += morse[ord(w) - 97]
            s.add(tmp)
        
        return len(s)

# 主函数
if __name__ == '__main__':
    solution = Solution()
    inputnum = ["gin","zen","gig","msg"]
    print("Input: ", inputnum)
    print("Output: ", solution.uniqueMorseRepresentations(inputnum))



# 运行结果
# Input:  ['gin', 'zen', 'gig', 'msg']
# Output:  2